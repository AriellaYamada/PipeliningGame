Sobre a arquitetura e o pipeline

	A arquitetura considerada no jogo é uma arquitetura típica de Von Neumann. Ela possui caráter RISC e seu assembly, à exceção de pequenos detalhes, é igual ao assembly MIPS. Tem-se um processador com uma unidade lógico-aritmética e um banco de registradores o qual suporta apenas um acesso (seja para leitura ou escrita) por vez (ciclo de clock). No caso de acesso de leitura, considera-se que dois registradores podem ser lidos em um único acesso, para que a leitura dos dois operandos de certas instruções ocorra em apenas um ciclo. A memória principal, assim como o banco de registradores, só suporta um único acesso por ciclo de clock, porém, diferentemente deste, tanto o acesso de leitura como o de escrita envolvem apenas uma posição da memória. Dispositivos de entrada e saída, embora parte da arquitetura de Von Neumann, não fazem nenhuma aparição aqui.

	Além disso, a arquitetura conta com um pipeline de cinco estágios para execução de instruções. Cada estágio dura exatamente um ciclo de clock, e todas as instruções sempre passam por todos os estágios, mesmo se não houver nada a ser feito em algum deles. Os estágios do pipeline são:
	- Instruction Fetch (IF): nesse estágio, é feito acesso a memória para buscar o código da próxima instrução a ser executada.
	- Instruction Decode (ID): nesse estágio a unidade de controle decodifica a instrução obtida e faz acesso ao banco de registradores para buscar
	o(s) operando(s) necessário(s).
	- Execução da instrução (ALU): nesse estágio é feita a operação na unidade lógico-aritmética. Todas as instruções, exceto NOOP, tem a necessidade de realizar alguma operação na ALU durante sua execução.
	- Acesso a memória (MEM): nesse estágio ocorre o acesso de escrita ou leitura na memória principal. É importante lembrar que, numa arquitetura RISC como o MIPS, apenas instruções load/store realizam acessos a memória.
	- Escrita do resultado (WB): nesse estágio é feito um acesso de escrita ao banco do registradores para gravação do resultado da instrução.


Quaisquer dois estágios do pipeline podem estar executando ao mesmo tempo, desde que não haja nenhum hazard envolvido.


Sobre o jogo e os hazards:
	O jogo consiste em ordenar da melhor maneira possível as instruções geradas, sem que ocorram os tipos de hazards abordados. Seu objetivo é auxiliar alunos de computação no estudo de pipelines e alguns dos hazards envolvidos. A ferramenta também serve a professores, pois pode (ou não, vai depender...) ser vista como um gerador e corretor automático de um modelo não incomum de exercícios sobre pipelines.

	Nos blocos de código com os quais o jogo trabalha dois tipos de hazards são possíveis:
		- Hazards estruturais: observa-se que ambos os estágios IF e MEM do pipeline podem tentar realizar acesso à memória. Como a memória só		permite um acesso por ciclo, não é permitido que ambos o façam ao mesmo tempo. Portanto bolhas podem ser necessárias para evitar que isso aconteça. O mesmo vale para os estágios ID e WB do pipeline, já que ambos realizam acesso ao banco de registradores.
		- Hazards de dependência de dados verdadeira: é possível que uma instrução precise ler de um registrador cujo conteúdo não está atualizado pois a última instrução que o modificou ainda não atingiu completou o estágio WB. Nesse caso, bolhas podem ser necessárias para fazer a nova instrução "esperar" até o registrador que requisita estar pronto.


O PROJETO

Desenvolvemos esse projeto com o intuito de auxiliar os alunos na aprendizagem dos conceitos de pipeline e de hazards. Para isso elaboramos essa ferramenta onde os alunos poderão simular a ordenação de instruções de modo que não ocorram hazards de nenhum tipo. Com a ferramenta, pretendemos que os alunos consigam aplicar e exercitar os conceitos que estão sendo desenvolvidos em sala de aula.
A ferramenta também serve a professores, pois pode ser vista como um gerador e corretor automático de um modelo não incomum de exercícios sobre pipelines.
